host: localhost:8001
https: false
version: "0.14.1"
services:
  - name: api-admin
    url: http://${POD_NAMESPACE}.api-admin.${SVC_DOMAIN}
  - name: api-command-center
    url: http://${POD_NAMESPACE}.api-command-center.${SVC_DOMAIN}
  # - name: api-config
  #   url: http://${POD_NAMESPACE}.api-config.${SVC_DOMAIN}
  # - name: api-core
  #   url: http://${POD_NAMESPACE}.api-core.${SVC_DOMAIN}
  # - name: api-horizon
  #   url: http://${POD_NAMESPACE}.api-horizon.${SVC_DOMAIN}
  # - name: api-messages
  #   url: http://${POD_NAMESPACE}.api-messages.${SVC_DOMAIN}
  # - name: api-providers
  #   url: http://${POD_NAMESPACE}.api-providers.${SVC_DOMAIN}
  # - name: api-scheduling
  #   url: http://${POD_NAMESPACE}.api-scheduling.${SVC_DOMAIN}
  # - name: api-sdk
  #   url: http://${POD_NAMESPACE}.api-sdk.${SVC_DOMAIN}
  # - name: api-twilio
  #   url: http://${POD_NAMESPACE}.api-twilio.${SVC_DOMAIN}
  # - name: stash
  #   url: http://${POD_NAMESPACE}.stash.${SVC_DOMAIN}

routes:
  - name: api-admin-private
    service: api-admin
    hosts: ['${POD_NAMESPACE}.api-admin.${DOMAIN_NAME}']
    paths: ["/auth"]
  - name: api-admin-public
    service: api-admin
  - name: api-config
    url: http://${POD_NAMESPACE}.api-config.${SVC_DOMAIN}
  - name: api-core
    url: http://${POD_NAMESPACE}.api-core.${SVC_DOMAIN}
  - name: api-horizon
    url: http://${POD_NAMESPACE}.api-horizon.${SVC_DOMAIN}
  - name: api-messages
    url: http://${POD_NAMESPACE}.api-messages.${SVC_DOMAIN}
  - name: api-providers
    url: http://${POD_NAMESPACE}.api-providers.${SVC_DOMAIN}
  - name: api-scheduling
    url: http://${POD_NAMESPACE}.api-scheduling.${SVC_DOMAIN}
  - name: api-sdk
    url: http://${POD_NAMESPACE}.api-sdk.${SVC_DOMAIN}
  - name: api-twilio
    url: http://${POD_NAMESPACE}.api-twilio.${SVC_DOMAIN}
  - name: stash
    url: http://${POD_NAMESPACE}.stash.${SVC_DOMAIN}
  # - name: api-core-config
  #   service: api-config
  #   hosts: ['${POD_NAMESPACE}api.${DOMAIN_NAME}']
  #   methods: ["GET"]
  #   paths: ["/config"]
  #   strip_path: true
  # - name: api-config-public
  #   service: api-config
  #   hosts: ['${POD_NAMESPACE}config.${DOMAIN_NAME}']
  #   methods: ["GET"]
  #   paths: ["/tos", "/app"]
  #   strip_path: false
  # - name: api-config-private
  #   service: api-config
  #   hosts: ['${POD_NAMESPACE}config.${DOMAIN_NAME}']
  # - name: api-core-private
  #   service: api-core
  #   hosts: ['${POD_NAMESPACE}api.${DOMAIN_NAME}']
  # - name: api-core-public-get
  #   service: api-core
  #   hosts: ['${POD_NAMESPACE}api.${DOMAIN_NAME}']
  #   methods: ["GET"]
  #   paths: ["/organizations", "/patients/email/exists", "/account/status"]
  #   strip_path: false
  # - name: api-core-public-post
  #   service: api-core
  #   hosts: ['${POD_NAMESPACE}api.${DOMAIN_NAME}']
  #   methods: ["POST"]
  #   paths: ["/organizations", "/register", "/login", "/forgot", "/reset"]
  #   strip_path: false
  # - name: api-horizon-auth
  #   service: api-horizon
  #   hosts: ['${POD_NAMESPACE}api-horizon.${DOMAIN_NAME}']
  #   methods: ["GET", "POST"]
  #   paths: ["/authentication"]
  #   strip_path: false
  # - name: api-horizon-public
  #   service: api-horizon
  #   hosts: ['${POD_NAMESPACE}api-horizon.${DOMAIN_NAME}', '${POD_NAMESPACE}api.${DOMAIN_NAME}']
  #   methods: ["POST"]
  #   paths: ["/horizon/login", "/horizon/parse_login_error", "/horizon/consentofcare/accept"]
  #   strip_path: false
  # - name: api-horizon-private
  #   service: api-horizon
  #   hosts: ['${POD_NAMESPACE}api-horizon.${DOMAIN_NAME}']
  #   methods: ["GET"]
  #   paths: ["/horizon/providersearch", "/horizon/idcard"]
  #   strip_path: false
  # - name: api-messages-public
  #   service: api-messages
  #   hosts: ['${POD_NAMESPACE}api-cc.${DOMAIN_NAME}', '${POD_NAMESPACE}providers.${DOMAIN_NAME}', '${POD_NAMESPACE}api.${DOMAIN_NAME}']
  #   methods: ["GET"]
  #   paths: ["/socket.io"]
  #   strip_path: false
  # - name: api-messages-private
  #   service: api-messages
  #   hosts: ['${POD_NAMESPACE}api-cc.${DOMAIN_NAME}', '${POD_NAMESPACE}providers.${DOMAIN_NAME}', '${POD_NAMESPACE}api.${DOMAIN_NAME}']
  #   methods: ["POST", "GET"]
  #   paths: ["/messages"]
  #   strip_path: false
  # - name: api-providers-public
  #   service: api-providers
  #   hosts: ['${POD_NAMESPACE}providers.${DOMAIN_NAME}']
  #   methods: ["POST"]
  #   paths: ["/login", "/forgot", "/reset"]
  #   strip_path: false
  # - name: api-providers-private
  #   service: api-providers
  #   hosts: ['${POD_NAMESPACE}providers.${DOMAIN_NAME}']
  # - name: api-scheduling-search
  #   service: api-scheduling
  #   hosts: ['${POD_NAMESPACE}api.${DOMAIN_NAME}', '${POD_NAMESPACE}api-scheduling.${DOMAIN_NAME}']
  #   methods: ["GET"]
  #   paths: ["/searchProviders"]
  #   strip_path: false
  # - name: api-scheduling-reasons
  #   service: api-scheduling
  #   hosts: ['${POD_NAMESPACE}api-scheduling.${DOMAIN_NAME}']
  #   methods: ["GET", "OPTIONS"]
  #   paths: ["/reasons"]
  #   strip_path: false

plugins:
  - name: jwt
    enabled: true
    target: [api-admin-private,api-command-center-private,api-config-private,api-core-private,api-horizon-private,api-messages-private,api-twilio-private,api-twilio-private-calls,api-providers-private,stash-private,api-core-config]
    config:
      claims_to_verify: exp
      uri_param_names: "jwt,token"
  - name: jwt
    enabled: true
    target: [api-scheduling]
    config:
      claims_to_verify: exp
      uri_param_names: "jwt,token"
  - name: cors
    enabled: true
    target: [api-command-center]
    config:
      credentials: true
      origins: https://${POD_NAMESPACE}command-center.${DOMAIN_NAME}
      preflight_continue: false
      exposed_headers: "Authorization,Armor-Session-Token"
      headers: "Authorization,Accept,Accept-Version,Content-Length,Content-Type,Date,Client-Type"
  - name: cors
    enabled: true
    target: [api-admin]
    config:
      credentials: true
      origins: https://${POD_NAMESPACE}dashboard.${DOMAIN_NAME}
      preflight_continue: false
      exposed_headers: "Authorization,Armor-Session-Token"
      headers: "Authorization,Accept,Accept-Version,Content-Length,Content-Type,Date,Client-Type"
  - name: correlation-id
    enabled: true
    target: global
    config:
      echo_downstream: true
      header_name: Pager-Request-ID
      generator: uuid

  - name: rate-limiting
    enabled: true
    target: global
    config:
      second: 20
      minute: 100
      hour: 1800

  - name: request-size-limiting
    enabled: true
    target: global
    config:
      allowed_payload_size: 3

  - name: prometheus
    enabled: true
    target: global

  - name: cors
    enabled: true
    target: global
    config:
      credentials: false
      preflight_continue: false
      exposed_headers: "Authorization,Armor-Session-Token"
      headers: "Authorization,Accept,Accept-Version,Content-Length,Content-Type,Date,Client-Type"

  - name: response-transformer
    enabled: true
    target: global
    config:
      remove.headers: "cache-control,vary,Strict-Transport-Security"
      replace.headers: "Server:Pager.com"
      add.headers[1]: "X-Content-Type-options:nosniff"
      add.headers[2]: "X-Permitted-Cross-Domain-Policies:master-only"
      add.headers[3]: "Referrer-Policy:no-referrer-when-downgrade"
      add.headers[4]: "X-XSS-Protection:1;mode=block"
      add.headers[5]: "Expires:-1"
      add.headers[6]: "Pragma:no-cache"
      add.headers[7]: "X-Download-Options:noopen"
      add.headers[8]: "X-Frame-Options:deny"
      add.headers[9]: "Content-Security-Policy:default-src 'none'"
      add.headers[10]: "Cache-Control:no-cache, no-store, must-revalidate"

consumers:
  - username: admin
    custom_id: admin@pager.com

credentials: []
